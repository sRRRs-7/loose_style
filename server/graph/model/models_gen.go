// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Node interface {
	IsNode()
}

type Address struct {
	ID                    string `json:"id"`
	AddressID             int    `json:"address_id"`
	DestinationFamilyName string `json:"destination_family_name"`
	DestinationFirstName  string `json:"destination_first_name"`
	Postcode              int    `json:"postcode"`
	PrefectureCode        string `json:"prefecture_code"`
	City                  string `json:"city"`
	Street                string `json:"street"`
	Building              string `json:"building"`
	Phone                 string `json:"phone"`
}

func (Address) IsNode() {}

type AddressUser struct {
	ID        string `json:"id"`
	UserID    string `json:"user_id"`
	AddressID int    `json:"address_id"`
}

type AuthUser struct {
	ID       string `json:"id"`
	Username string `json:"username"`
	Sex      string `json:"sex"`
}

func (AuthUser) IsNode() {}

type CartItem struct {
	ID        string `json:"id"`
	UserID    int    `json:"user_id"`
	ProductID int    `json:"product_id"`
}

func (CartItem) IsNode() {}

type Media struct {
	ID        string    `json:"id"`
	Title     string    `json:"title"`
	Contents  string    `json:"contents"`
	Img       string    `json:"img"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (Media) IsNode() {}

type MutationResponse struct {
	ID      string `json:"id"`
	IsError bool   `json:"is_error"`
	Message string `json:"message"`
}

func (MutationResponse) IsNode() {}

type Order struct {
	ID        string    `json:"id"`
	UserID    string    `json:"user_id"`
	ProductID int       `json:"product_id"`
	Quantity  int       `json:"quantity"`
	Postage   int       `json:"postage"`
	Price     int       `json:"price"`
	Status    bool      `json:"status"`
	CreatedAt time.Time `json:"created_at"`
}

func (Order) IsNode() {}

type Post struct {
	ID        string `json:"id"`
	Title     string `json:"title"`
	Votes     int    `json:"votes"`
	URL       string `json:"url"`
	CreatedAt string `json:"createdAt"`
}

type PostsMeta struct {
	Count int `json:"count"`
}

type Product struct {
	ID          string    `json:"id"`
	ProductName string    `json:"product_name"`
	Description string    `json:"description"`
	Img         string    `json:"img"`
	UnitPrice   int       `json:"unit_price"`
	Discount    float64   `json:"discount"`
	Stock       int       `json:"stock"`
	Brand       int       `json:"brand"`
	Category    string    `json:"category"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (Product) IsNode() {}

type User struct {
	ID                    string    `json:"id"`
	UserID                string    `json:"user_id"`
	Password              string    `json:"password"`
	Username              string    `json:"username"`
	Email                 string    `json:"email"`
	Sex                   string    `json:"sex"`
	DateOfBirth           string    `json:"date_of_birth"`
	DestinationFamilyName string    `json:"destination_family_name"`
	DestinationFirstName  string    `json:"destination_first_name"`
	Postcode              int       `json:"postcode"`
	PrefectureCode        string    `json:"prefecture_code"`
	City                  string    `json:"city"`
	Street                string    `json:"street"`
	Building              string    `json:"building"`
	Phone                 string    `json:"phone"`
	CreatedAt             time.Time `json:"created_at"`
	UpdatedAt             time.Time `json:"updated_at"`
}

func (User) IsNode() {}

type AdminUser struct {
	ID       string `json:"id"`
	Username string `json:"username"`
	Password string `json:"password"`
}

func (AdminUser) IsNode() {}

type AdminUserResponse struct {
	ID         string `json:"id"`
	IsUsername bool   `json:"is_username"`
	IsPassword bool   `json:"is_password"`
}

func (AdminUserResponse) IsNode() {}

type Category string

const (
	CategoryFashion   Category = "fashion"
	CategoryLifeStyle Category = "lifeStyle"
	CategoryChair     Category = "chair"
	CategoryInterior  Category = "interior"
	CategoryShoes     Category = "shoes"
)

var AllCategory = []Category{
	CategoryFashion,
	CategoryLifeStyle,
	CategoryChair,
	CategoryInterior,
	CategoryShoes,
}

func (e Category) IsValid() bool {
	switch e {
	case CategoryFashion, CategoryLifeStyle, CategoryChair, CategoryInterior, CategoryShoes:
		return true
	}
	return false
}

func (e Category) String() string {
	return string(e)
}

func (e *Category) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Category(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Category", str)
	}
	return nil
}

func (e Category) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderBy string

const (
	OrderByCreatedAtAsc  OrderBy = "createdAt_ASC"
	OrderByCreatedAtDesc OrderBy = "createdAt_DESC"
)

var AllOrderBy = []OrderBy{
	OrderByCreatedAtAsc,
	OrderByCreatedAtDesc,
}

func (e OrderBy) IsValid() bool {
	switch e {
	case OrderByCreatedAtAsc, OrderByCreatedAtDesc:
		return true
	}
	return false
}

func (e OrderBy) String() string {
	return string(e)
}

func (e *OrderBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderBy", str)
	}
	return nil
}

func (e OrderBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortBy string

const (
	SortByAsc  SortBy = "ASC"
	SortByDesc SortBy = "DESC"
)

var AllSortBy = []SortBy{
	SortByAsc,
	SortByDesc,
}

func (e SortBy) IsValid() bool {
	switch e {
	case SortByAsc, SortByDesc:
		return true
	}
	return false
}

func (e SortBy) String() string {
	return string(e)
}

func (e *SortBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortBy", str)
	}
	return nil
}

func (e SortBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
