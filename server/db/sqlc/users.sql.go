// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: users.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    user_id,
    password,
    username,
    email,
    sex,
    data_of_birth,
    destination_family_name,
    destination_first_name,
    postcode,
    prefecture_code,
    city,
    street,
    building,
    phone,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16
) RETURNING id, user_id, password, username, email, sex, data_of_birth, destination_family_name, destination_first_name, postcode, prefecture_code, city, street, building, phone, created_at, updated_at
`

type CreateUserParams struct {
	UserID                string    `json:"user_id"`
	Password              string    `json:"password"`
	Username              string    `json:"username"`
	Email                 string    `json:"email"`
	Sex                   string    `json:"sex"`
	DataOfBirth           string    `json:"data_of_birth"`
	DestinationFamilyName string    `json:"destination_family_name"`
	DestinationFirstName  string    `json:"destination_first_name"`
	Postcode              int32     `json:"postcode"`
	PrefectureCode        string    `json:"prefecture_code"`
	City                  string    `json:"city"`
	Street                string    `json:"street"`
	Building              string    `json:"building"`
	Phone                 string    `json:"phone"`
	CreatedAt             time.Time `json:"created_at"`
	UpdatedAt             time.Time `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*Users, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserID,
		arg.Password,
		arg.Username,
		arg.Email,
		arg.Sex,
		arg.DataOfBirth,
		arg.DestinationFamilyName,
		arg.DestinationFirstName,
		arg.Postcode,
		arg.PrefectureCode,
		arg.City,
		arg.Street,
		arg.Building,
		arg.Phone,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Password,
		&i.Username,
		&i.Email,
		&i.Sex,
		&i.DataOfBirth,
		&i.DestinationFamilyName,
		&i.DestinationFirstName,
		&i.Postcode,
		&i.PrefectureCode,
		&i.City,
		&i.Street,
		&i.Building,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id FROM users
WHERE user_id = $1
`

func (q *Queries) GetUser(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, user_id, password, username, email, sex, data_of_birth, destination_family_name, destination_first_name, postcode, prefecture_code, city, street, building, phone, created_at, updated_at FROM users
ORDER BY user_id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]*Users, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Users{}
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Password,
			&i.Username,
			&i.Email,
			&i.Sex,
			&i.DataOfBirth,
			&i.DestinationFamilyName,
			&i.DestinationFirstName,
			&i.Postcode,
			&i.PrefectureCode,
			&i.City,
			&i.Street,
			&i.Building,
			&i.Phone,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const loginUser = `-- name: LoginUser :one
SELECT id, user_id, password, username, email, sex, data_of_birth, destination_family_name, destination_first_name, postcode, prefecture_code, city, street, building, phone, created_at, updated_at FROM users
WHERE user_id = $1 AND password = $2
`

type LoginUserParams struct {
	UserID   string `json:"user_id"`
	Password string `json:"password"`
}

func (q *Queries) LoginUser(ctx context.Context, arg LoginUserParams) (*Users, error) {
	row := q.db.QueryRow(ctx, loginUser, arg.UserID, arg.Password)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Password,
		&i.Username,
		&i.Email,
		&i.Sex,
		&i.DataOfBirth,
		&i.DestinationFamilyName,
		&i.DestinationFirstName,
		&i.Postcode,
		&i.PrefectureCode,
		&i.City,
		&i.Street,
		&i.Building,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET username = $2,
    email = $3,
    updated_at = $4
WHERE user_id = $1
RETURNING id, user_id, password, username, email, sex, data_of_birth, destination_family_name, destination_first_name, postcode, prefecture_code, city, street, building, phone, created_at, updated_at
`

type UpdateUserParams struct {
	UserID    string    `json:"user_id"`
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.UserID,
		arg.Username,
		arg.Email,
		arg.UpdatedAt,
	)
	return err
}
