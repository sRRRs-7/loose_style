// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: carts.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createCartItem = `-- name: CreateCartItem :one
INSERT INTO carts (
    user_id, product_id
) VALUES (
    $1, $2
) RETURNING id, user_id, product_id
`

type CreateCartItemParams struct {
	UserID    int64 `json:"user_id"`
	ProductID int64 `json:"product_id"`
}

func (q *Queries) CreateCartItem(ctx context.Context, arg CreateCartItemParams) (*Carts, error) {
	row := q.db.QueryRow(ctx, createCartItem, arg.UserID, arg.ProductID)
	var i Carts
	err := row.Scan(&i.ID, &i.UserID, &i.ProductID)
	return &i, err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
DELETE FROM carts
WHERE id = $1
`

func (q *Queries) DeleteCartItem(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCartItem, id)
	return err
}

const getAllCartItem = `-- name: GetAllCartItem :many
SELECT p.id, p.product_name, p.description, p.img, p.unit_price, p.discount, p.stock, p.brand_id, p.category, p.created_at, p.updated_at, c.id FROM carts AS c
INNER JOIN users AS u ON c.user_id = u.id
INNER JOIN products AS p ON c.product_id = p.id
WHERE c.user_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetAllCartItemParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllCartItemRow struct {
	ID          int64          `json:"id"`
	ProductName string         `json:"product_name"`
	Description sql.NullString `json:"description"`
	Img         sql.NullString `json:"img"`
	UnitPrice   int32          `json:"unit_price"`
	Discount    float64        `json:"discount"`
	Stock       int32          `json:"stock"`
	BrandID     int64          `json:"brand_id"`
	Category    int64          `json:"category"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
	ID_2        int64          `json:"id_2"`
}

func (q *Queries) GetAllCartItem(ctx context.Context, arg GetAllCartItemParams) ([]*GetAllCartItemRow, error) {
	rows, err := q.db.Query(ctx, getAllCartItem, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetAllCartItemRow{}
	for rows.Next() {
		var i GetAllCartItemRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductName,
			&i.Description,
			&i.Img,
			&i.UnitPrice,
			&i.Discount,
			&i.Stock,
			&i.BrandID,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
