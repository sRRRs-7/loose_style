// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: products.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createProduct = `-- name: CreateProduct :exec
INSERT INTO products (
    product_name, description, img, unit_price, discount, stock, brand_id, category, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, product_name, description, img, unit_price, discount, stock, brand_id, category, created_at, updated_at
`

type CreateProductParams struct {
	ProductName string         `json:"product_name"`
	Description sql.NullString `json:"description"`
	Img         sql.NullString `json:"img"`
	UnitPrice   int32          `json:"unit_price"`
	Discount    float64        `json:"discount"`
	Stock       int32          `json:"stock"`
	BrandID     int64          `json:"brand_id"`
	Category    int64          `json:"category"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.Exec(ctx, createProduct,
		arg.ProductName,
		arg.Description,
		arg.Img,
		arg.UnitPrice,
		arg.Discount,
		arg.Stock,
		arg.BrandID,
		arg.Category,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, product_name, description, img, unit_price, discount, stock, brand_id, category, created_at, updated_at FROM products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (*Products, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i Products
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.Description,
		&i.Img,
		&i.UnitPrice,
		&i.Discount,
		&i.Stock,
		&i.BrandID,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listProduct = `-- name: ListProduct :many
SELECT id, product_name, description, img, unit_price, discount, stock, brand_id, category, created_at, updated_at FROM products
ORDER BY created_at ASC
LIMIT $1
OFFSET $2
`

type ListProductParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProduct(ctx context.Context, arg ListProductParams) ([]*Products, error) {
	rows, err := q.db.Query(ctx, listProduct, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Products{}
	for rows.Next() {
		var i Products
		if err := rows.Scan(
			&i.ID,
			&i.ProductName,
			&i.Description,
			&i.Img,
			&i.UnitPrice,
			&i.Discount,
			&i.Stock,
			&i.BrandID,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductByCategory = `-- name: ListProductByCategory :many
SELECT p.id, p.product_name, p.description, p.img, p.unit_price, p.discount, p.stock, p.brand_id, p.category, p.created_at, p.updated_at FROM
products AS p
INNER JOIN
categories AS c
ON p.category = c.id
WHERE c.category = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type ListProductByCategoryParams struct {
	Category string `json:"category"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) ListProductByCategory(ctx context.Context, arg ListProductByCategoryParams) ([]*Products, error) {
	rows, err := q.db.Query(ctx, listProductByCategory, arg.Category, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Products{}
	for rows.Next() {
		var i Products
		if err := rows.Scan(
			&i.ID,
			&i.ProductName,
			&i.Description,
			&i.Img,
			&i.UnitPrice,
			&i.Discount,
			&i.Stock,
			&i.BrandID,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductByKeyword = `-- name: ListProductByKeyword :many
SELECT id, product_name, description, img, unit_price, discount, stock, brand_id, category, created_at, updated_at FROM products
WHERE description LIKE $1
OR product_name LIKE $2
ORDER BY unit_price ASC
LIMIT $3
OFFSET $4
`

type ListProductByKeywordParams struct {
	Description sql.NullString `json:"description"`
	ProductName string         `json:"product_name"`
	Limit       int32          `json:"limit"`
	Offset      int32          `json:"offset"`
}

func (q *Queries) ListProductByKeyword(ctx context.Context, arg ListProductByKeywordParams) ([]*Products, error) {
	rows, err := q.db.Query(ctx, listProductByKeyword,
		arg.Description,
		arg.ProductName,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Products{}
	for rows.Next() {
		var i Products
		if err := rows.Scan(
			&i.ID,
			&i.ProductName,
			&i.Description,
			&i.Img,
			&i.UnitPrice,
			&i.Discount,
			&i.Stock,
			&i.BrandID,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductStock = `-- name: UpdateProductStock :one
UPDATE products
SET stock = $2,
    updated_at = $3
WHERE id = $1
RETURNING id, product_name, description, img, unit_price, discount, stock, brand_id, category, created_at, updated_at
`

type UpdateProductStockParams struct {
	ID        int64     `json:"id"`
	Stock     int32     `json:"stock"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateProductStock(ctx context.Context, arg UpdateProductStockParams) (*Products, error) {
	row := q.db.QueryRow(ctx, updateProductStock, arg.ID, arg.Stock, arg.UpdatedAt)
	var i Products
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.Description,
		&i.Img,
		&i.UnitPrice,
		&i.Discount,
		&i.Stock,
		&i.BrandID,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
