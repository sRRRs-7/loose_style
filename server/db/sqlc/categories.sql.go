// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: categories.sql

package db

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
    category
) VALUES (
    $1
) RETURNING id, category
`

func (q *Queries) CreateCategory(ctx context.Context, category string) (*Categories, error) {
	row := q.db.QueryRow(ctx, createCategory, category)
	var i Categories
	err := row.Scan(&i.ID, &i.Category)
	return &i, err
}

const getCategories = `-- name: GetCategories :one
SELECT id, category FROM categories
WHERE category = $1 LIMIT 1
`

func (q *Queries) GetCategories(ctx context.Context, category string) (*Categories, error) {
	row := q.db.QueryRow(ctx, getCategories, category)
	var i Categories
	err := row.Scan(&i.ID, &i.Category)
	return &i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, category FROM categories
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCategories(ctx context.Context, arg ListCategoriesParams) ([]*Categories, error) {
	rows, err := q.db.Query(ctx, listCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Categories{}
	for rows.Next() {
		var i Categories
		if err := rows.Scan(&i.ID, &i.Category); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
