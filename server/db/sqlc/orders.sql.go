// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: orders.sql

package db

import (
	"context"
	"time"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    user_id, product_id, quantity, postage, price, status, created_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, user_id, product_id, quantity, postage, price, status, created_at
`

type CreateOrderParams struct {
	UserID    string    `json:"user_id"`
	ProductID int64     `json:"product_id"`
	Quantity  int32     `json:"quantity"`
	Postage   int32     `json:"postage"`
	Price     int32     `json:"price"`
	Status    bool      `json:"status"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (*Orders, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.UserID,
		arg.ProductID,
		arg.Quantity,
		arg.Postage,
		arg.Price,
		arg.Status,
		arg.CreatedAt,
	)
	var i Orders
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.Postage,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
	)
	return &i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, user_id, product_id, quantity, postage, price, status, created_at FROM orders
WHERE user_id = $1 and product_id = $2
`

type GetOrderParams struct {
	UserID    string `json:"user_id"`
	ProductID int64  `json:"product_id"`
}

func (q *Queries) GetOrder(ctx context.Context, arg GetOrderParams) (*Orders, error) {
	row := q.db.QueryRow(ctx, getOrder, arg.UserID, arg.ProductID)
	var i Orders
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.Postage,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
	)
	return &i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, user_id, product_id, quantity, postage, price, status, created_at FROM orders
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListOrders(ctx context.Context, userID string) ([]*Orders, error) {
	rows, err := q.db.Query(ctx, listOrders, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Orders{}
	for rows.Next() {
		var i Orders
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.Quantity,
			&i.Postage,
			&i.Price,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderQuantity = `-- name: UpdateOrderQuantity :exec
UPDATE orders
SET quantity = $2
where id = $1
RETURNING id, user_id, product_id, quantity, postage, price, status, created_at
`

type UpdateOrderQuantityParams struct {
	ID       int64 `json:"id"`
	Quantity int32 `json:"quantity"`
}

func (q *Queries) UpdateOrderQuantity(ctx context.Context, arg UpdateOrderQuantityParams) error {
	_, err := q.db.Exec(ctx, updateOrderQuantity, arg.ID, arg.Quantity)
	return err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders
SET status = $2
WHERE id = $1
RETURNING id, user_id, product_id, quantity, postage, price, status, created_at
`

type UpdateOrderStatusParams struct {
	ID     int64 `json:"id"`
	Status bool  `json:"status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.Exec(ctx, updateOrderStatus, arg.ID, arg.Status)
	return err
}
